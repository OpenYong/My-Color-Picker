{"version":3,"file":"static/js/312.9df398b0.chunk.js","mappings":"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","sources":["webpack://my-colors/./src/components/Palette/NewPaletteForm.module.css?39dc","webpack://my-colors/./src/components/Palette/DraggableColorLists.module.css?014b","webpack://my-colors/./src/components/Palette/DraggableColorContainer.module.css?34b0","components/Palette/DraggableColorContainer.js","components/Palette/DraggableColorLists.js","components/EmojiPicker.js","components/Palette/NewPaletteForm.js","pages/NewPalettePage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main-container\":\"NewPaletteForm_main-container__wWqd1\",\"color-form\":\"NewPaletteForm_color-form__fVm+B\"};","// extracted by mini-css-extract-plugin\nexport default {\"new-palette\":\"DraggableColorLists_new-palette__F0hlr\",\"react-colorfult-container\":\"DraggableColorLists_react-colorfult-container__rTtMH\"};","// extracted by mini-css-extract-plugin\nexport default {\"color-container\":\"DraggableColorContainer_color-container__L-YR4\",\"color-background\":\"DraggableColorContainer_color-background__uE3iA\",\"color-info\":\"DraggableColorContainer_color-info__Q8bMn\",\"color-info__code\":\"DraggableColorContainer_color-info__code__SKawW\",\"text-color--white\":\"DraggableColorContainer_text-color--white__gEAkZ\",\"color-info__name\":\"DraggableColorContainer_color-info__name__5WUBv\",\"color-container__right\":\"DraggableColorContainer_color-container__right__1Qdhc\",\"add-btn\":\"DraggableColorContainer_add-btn__J5h05\",\"drag-btn\":\"DraggableColorContainer_drag-btn__KRSq7\"};","import React from \"react\";\nimport { useSortable } from \"@dnd-kit/sortable\";\nimport styles from \"./DraggableColorContainer.module.css\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport chroma from \"chroma-js\";\n\nconst DraggableColorContainer = (props) => {\n  const { onColorPick, dataIndex, name, color, onAddColor, onRemoveColor } =\n    props;\n\n  const { attributes, listeners, setNodeRef, transform, transition } =\n    useSortable({ id: name });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  let isDark = chroma(color).luminance() <= 0.1;\n\n  return (\n    <div\n      className={styles[\"color-container\"]}\n      ref={setNodeRef}\n      style={style}\n      {...attributes}\n    >\n      <div\n        className={styles[\"color-background\"]}\n        onClick={() => onColorPick(dataIndex)}\n        style={{ backgroundColor: color }}\n      >\n        <div className={styles[\"color-info\"]}>\n          <span\n            className={styles[\"color-info__code\"]}\n            style={{\n              color: isDark ? \"white\" : \"\",\n            }}\n          >\n            {color}\n          </span>\n          <span\n            className={styles[\"color-info__name\"]}\n            style={{ color: isDark ? \"white\" : \"\" }}\n          >\n            {name}\n          </span>\n        </div>\n      </div>\n      <div className={styles[\"color-container__right\"]}>\n        <div\n          className={styles[\"add-btn\"]}\n          onClick={() => onAddColor(dataIndex)}\n        >\n          +\n        </div>\n        <div\n          className={styles[\"add-btn\"]}\n          onClick={() => onRemoveColor(dataIndex)}\n        >\n          -\n        </div>\n        <button className={styles[\"drag-btn\"]} {...listeners}>\n          이동\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default DraggableColorContainer;\n","import React, { useState, useRef } from \"react\";\nimport styles from \"./DraggableColorLists.module.css\";\nimport DraggableColorContainer from \"./DraggableColorContainer\";\n\nimport chroma from \"chroma-js\";\nimport { HexColorInput, HexColorPicker } from \"react-colorful\";\nimport {\n  horizontalListSortingStrategy,\n  SortableContext,\n  arrayMove,\n} from \"@dnd-kit/sortable\";\nimport {\n  DndContext,\n  PointerSensor,\n  useSensor,\n  closestCenter,\n} from \"@dnd-kit/core\";\n\nconst DraggableColorLists = (props) => {\n  const {\n    colors,\n    onSetColors,\n    newPaletteInputRef,\n    hexColorPickerRef,\n    isPickerOpen,\n    setIsPickerOpen,\n  } = props;\n\n  const [clickedColorBox, setClickedColorBox] = useState();\n  const [enteredColorName, setEnteredColorName] = useState(\"\");\n\n  const colorContainerClickHandler = (dataIndex) => {\n    setClickedColorBox(dataIndex);\n    setIsPickerOpen(true);\n  };\n\n  const pickerHandler = (color, clickedColorIndex) => {\n    let newColorArray = [...colors];\n    newColorArray[clickedColorIndex].color = color;\n    onSetColors(newColorArray);\n  };\n\n  const nameChangeHandler = (event, clickedColorIndex) => {\n    setEnteredColorName(event.target.value);\n  };\n\n  const addColorClickHandler = (dataIndex) => {\n    if (colors.length === 10) {\n      alert(\"최대 10개 까지 추가할 수 있습니다.\");\n      return;\n    }\n    let targetScaleColor;\n    if (colors[dataIndex + 1] === undefined) {\n      targetScaleColor = \"#000000\";\n    } else {\n      targetScaleColor = colors[dataIndex + 1].color;\n    }\n\n    let newColorArray = [...colors];\n    newColorArray.splice(dataIndex + 1, 0, {\n      name: `New Color ${colors.length}`,\n      color: chroma\n        .scale([colors[dataIndex].color, targetScaleColor])\n        .mode(\"lab\")\n        .colors(1)[0],\n    });\n    onSetColors(newColorArray);\n  };\n\n  const removeColorHandler = (dataIndex) => {\n    if (colors.length > 1) {\n      let newColorArray = [...colors];\n      newColorArray.splice(dataIndex, 1);\n      onSetColors(newColorArray);\n    } else {\n      return;\n    }\n  };\n\n  const sensors = [useSensor(PointerSensor)];\n\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n    if (active.id !== over.id) {\n      onSetColors((items) => {\n        const oldIndex = items.findIndex((item) => item.name === active.id);\n        const newIndex = items.findIndex((item) => item.name === over.id);\n\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n\n  const blurHandler = (e, clickedColorIndex) => {\n    const result = colors.findIndex((color) => color.name === enteredColorName);\n\n    if (result !== -1 && result !== clickedColorIndex) {\n      alert(\"색상 이름이 중복됩니다.\");\n      return;\n    }\n\n    if (enteredColorName.trim() === \"\") {\n      alert(\"색상의 이름을 입력해주세요\");\n      return;\n    }\n\n    let newColorArray = [...colors];\n    newColorArray[clickedColorIndex].name = enteredColorName;\n    onSetColors(newColorArray);\n    setIsPickerOpen(false);\n  };\n\n  return (\n    <>\n      <div className={styles[\"new-palette\"]} ref={newPaletteInputRef}>\n        <DndContext\n          sensors={sensors}\n          collisionDetection={closestCenter}\n          onDragEnd={handleDragEnd}\n        >\n          <SortableContext\n            items={colors.map((item) => item.name)}\n            strategy={horizontalListSortingStrategy}\n          >\n            {colors.map((color, index) => (\n              <DraggableColorContainer\n                key={Math.random().toString()}\n                dataIndex={index}\n                onColorPick={colorContainerClickHandler}\n                onAddColor={addColorClickHandler}\n                onRemoveColor={removeColorHandler}\n                {...color}\n              />\n            ))}\n          </SortableContext>\n        </DndContext>\n      </div>\n      <div\n        className={styles[\"react-colorfult-container\"]}\n        ref={hexColorPickerRef}\n      >\n        {isPickerOpen && (\n          <>\n            <HexColorPicker\n              color={colors[clickedColorBox].color}\n              onChange={(color) => pickerHandler(color, clickedColorBox)}\n            />\n            <HexColorInput\n              color={colors[clickedColorBox].color}\n              onChange={(color) => pickerHandler(color, clickedColorBox)}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"색상 이름\"\n              value={enteredColorName}\n              onChange={(e) => nameChangeHandler(e, clickedColorBox)}\n              onBlur={(e) => blurHandler(e, clickedColorBox)}\n            />\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default DraggableColorLists;\n","import React, { useEffect, useRef } from \"react\";\nimport { render } from \"react-dom\";\n\nimport data from \"@emoji-mart/data\";\nimport { Picker } from \"emoji-mart\";\n\nfunction EmojiPicker(props) {\n  const ref = useRef();\n\n  const executedRef = useRef(false);\n  useEffect(() => {\n    if (executedRef.current) return;\n    new Picker({ ...props, data, ref });\n    executedRef.current = true;\n  }, []);\n\n  return <div ref={ref} />;\n}\n\nexport default EmojiPicker;\n","import React, { useState, useRef, useContext } from \"react\";\nimport styles from \"./NewPaletteForm.module.css\";\n\nimport Box from \"@mui/material/Box\";\nimport Input from \"@mui/material/Input\";\nimport Button from \"@mui/material/Button\";\n\nimport DraggableColorLists from \"./DraggableColorLists\";\nimport EmojiPicker from \"../EmojiPicker\";\n\nimport ColorsContext from \"../../store/colors-context\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst NewPaletteForm = (props) => {\n  const [colors, setColors] = useState([\n    {\n      name: \"Your Color 1\",\n      color: \"#aabbcc\",\n    },\n    {\n      name: \"Your Color 2\",\n      color: \"#373737\",\n    },\n    {\n      name: \"Your Color 3\",\n      color: \"#C15555\",\n    },\n    {\n      name: \"Your Color 4\",\n      color: \"#F1C7C7\",\n    },\n  ]);\n  const [isPickerOpen, setIsPickerOpen] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n  const [enteredEmoji, setEnteredEmoji] = useState(\"\");\n  const colorsCtx = useContext(ColorsContext);\n\n  const paletteNameInput = useRef();\n  const paletteEmojiInput = useRef();\n  const newPaletteInput = useRef();\n  const hexColorPicker = useRef();\n\n  const navigate = useNavigate();\n\n  const savePaletteHandler = (e) => {\n    e.preventDefault();\n\n    if (paletteNameInput.current.value === \"\") {\n      return;\n    }\n    const newPalette = {\n      paletteName: paletteNameInput.current.value,\n      id: paletteNameInput.current.value,\n      emoji: paletteEmojiInput.current.value,\n      colors: colors,\n    };\n    colorsCtx.addPalette(newPalette);\n\n    paletteNameInput.current.value = \"\";\n    paletteEmojiInput.current.value = \"\";\n\n    navigate(\"../\", { replace: true });\n  };\n\n  // 컬러 피커가 열려있을때\n  // 색상 선택을 할 수 있도록 하기 위함\n  const outClickHandler = (e) => {\n    if (hexColorPicker.current.contains(e.target)) {\n      setIsPickerOpen(true);\n    } else if (!newPaletteInput.current.contains(e.target)) {\n      // setIsPickerOpen(false);\n    }\n  };\n\n  const focusHandler = () => {\n    setIsFocused(true);\n  };\n\n  return (\n    <div className={styles[\"main-container\"]} onClick={outClickHandler}>\n      <DraggableColorLists\n        colors={colors}\n        onSetColors={setColors}\n        newPaletteInputRef={newPaletteInput}\n        hexColorPickerRef={hexColorPicker}\n        isPickerOpen={isPickerOpen}\n        setIsPickerOpen={setIsPickerOpen}\n      />\n      <Box\n        component=\"form\"\n        sx={{\n          \"& > :not(style)\": { m: 1, width: \"25ch\" },\n        }}\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e) => savePaletteHandler(e)}\n        className={styles[\"color-form\"]}\n      >\n        <Input\n          id=\"standard-basic\"\n          placeholder=\"팔레트 이름\"\n          inputRef={paletteNameInput}\n        />\n        <Input\n          id=\"standard-basic\"\n          placeholder=\"이모지\"\n          inputRef={paletteEmojiInput}\n          onFocus={focusHandler}\n          value={enteredEmoji}\n        />\n        <Button variant=\"outlined\" type=\"submit\">\n          만들기\n        </Button>\n\n        {isFocused && (\n          <EmojiPicker\n            onEmojiSelect={(e) => {\n              setEnteredEmoji(e.native);\n            }}\n          />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default NewPaletteForm;\n","import React from \"react\";\nimport Header from \"../components/Layout/Header\";\nimport Nav from \"../components/Layout/Nav\";\nimport NewPaletteForm from \"../components/Palette/NewPaletteForm\";\n\nconst NewPalettePage = () => {\n  return (\n    <div>\n      <Header />\n      <Nav />\n      <NewPaletteForm />\n    </div>\n  );\n};\n\nexport default NewPalettePage;\n"],"names":["props","onColorPick","dataIndex","name","color","onAddColor","onRemoveColor","useSortable","id","attributes","listeners","setNodeRef","transform","transition","style","CSS","isDark","chroma","luminance","className","styles","ref","onClick","backgroundColor","colors","onSetColors","newPaletteInputRef","hexColorPickerRef","isPickerOpen","setIsPickerOpen","useState","clickedColorBox","setClickedColorBox","enteredColorName","setEnteredColorName","colorContainerClickHandler","pickerHandler","clickedColorIndex","newColorArray","addColorClickHandler","length","targetScaleColor","undefined","splice","mode","alert","removeColorHandler","sensors","useSensor","PointerSensor","collisionDetection","closestCenter","onDragEnd","event","active","over","items","oldIndex","findIndex","item","newIndex","arrayMove","map","strategy","horizontalListSortingStrategy","index","Math","random","toString","onChange","type","placeholder","value","e","target","onBlur","result","trim","blurHandler","useRef","executedRef","useEffect","current","Picker","data","setColors","isFocused","setIsFocused","enteredEmoji","setEnteredEmoji","colorsCtx","useContext","ColorsContext","paletteNameInput","paletteEmojiInput","newPaletteInput","hexColorPicker","navigate","useNavigate","contains","Box","component","sx","m","width","noValidate","autoComplete","onSubmit","preventDefault","newPalette","paletteName","emoji","addPalette","replace","savePaletteHandler","Input","inputRef","onFocus","Button","variant","onEmojiSelect","native","Header","Nav"],"sourceRoot":""}