{"version":3,"file":"static/js/923.8cb939b9.chunk.js","mappings":"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","sources":["webpack://my-colors/./src/components/ColorContainer.module.css?d1a7","components/ColorContainer.js","webpack://my-colors/./src/components/Palette/Palette.module.css?e87d","webpack://my-colors/./src/components/Palette/PaletteControl.module.css?fa75","components/Palette/PaletteControl.js","components/UI/CustomSnackbar.js","components/Palette/Palette.js","util/colorHelper.js","pages/PalettePage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"color-container\":\"ColorContainer_color-container__k-uD3\",\"copy-btn\":\"ColorContainer_copy-btn__7DEcd\",\"picked\":\"ColorContainer_picked__I12Fc\",\"color-name\":\"ColorContainer_color-name__ta8D5\",\"color-name--white\":\"ColorContainer_color-name--white__1EleE\",\"color-name--black\":\"ColorContainer_color-name--black__U8vCT\"};","import React, { useState, useRef } from \"react\";\nimport styles from \"./ColorContainer.module.css\";\n\nimport chroma from \"chroma-js\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nconst ColorContainer = (props) => {\n  const { colorName, colorCode } = props;\n  const [isPicked, setIsPicked] = useState(false);\n\n  const pickedColorInput = useRef();\n\n  const onChangeHandler = () => {\n    setIsPicked(pickedColorInput.current.checked);\n  };\n\n  const onBlurHandler = () => {\n    setIsPicked(false);\n  };\n\n  let isDark = chroma(colorCode).luminance() <= 0.1;\n  let isLight = chroma(colorCode).luminance() >= 0.8;\n\n  return (\n    <CopyToClipboard text={colorCode} onCopy={onChangeHandler}>\n      <div\n        style={{\n          background: props.colorCode,\n        }}\n        className={`${styles[\"color-container\"]}`}\n      >\n        <div className={`${isPicked && styles.picked}`}>\n          <div className={styles[\"color-name\"]}>\n            <span\n              className={\n                (isDark && styles[\"color-name--white\"]) ||\n                (isLight && styles[\"color-name--black\"])\n              }\n            >\n              {colorName}\n            </span>\n          </div>\n          <input\n            type=\"radio\"\n            id={colorCode}\n            value={colorName}\n            name=\"main-colors\"\n            ref={pickedColorInput}\n            onBlur={onBlurHandler}\n          />\n          <label\n            htmlFor={colorCode}\n            className={`${styles[\"copy-btn\"]} ${isPicked && styles.picked}`}\n          ></label>\n        </div>\n      </div>\n    </CopyToClipboard>\n  );\n};\n\nexport default ColorContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"palette\":\"Palette_palette__IXjvx\",\"palette-colors\":\"Palette_palette-colors__4B9Ky\",\"palette-title\":\"Palette_palette-title__fELxk\"};","// extracted by mini-css-extract-plugin\nexport default {\"palette-control\":\"PaletteControl_palette-control__SYJVb\",\"control-container\":\"PaletteControl_control-container__vcLS0\",\"palette-title\":\"PaletteControl_palette-title__SnN1V\",\"slider\":\"PaletteControl_slider__J7TBw\",\"select\":\"PaletteControl_select__mx6E7\"};","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport styles from \"./PaletteControl.module.css\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport Box from \"@mui/material/Box\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport InputLabel from \"@mui/material/InputLabel\";\n\nconst PaletteControl = (props) => {\n  const {\n    level,\n    colorFormat,\n    onChangeLevel,\n    onChangeFormat,\n    paletteName,\n    emoji,\n  } = props;\n\n  const selectChangeHandler = (event) => {\n    onChangeFormat(event.target.value);\n  };\n\n  return (\n    <div className={styles[\"palette-control\"]}>\n      <h1 className={styles[\"palette-title\"]}>\n        {paletteName}\n        {\"  \"}\n        {emoji}\n      </h1>\n      <div className={styles[\"control-container\"]}>\n        <div className={styles.slider}>\n          <span>컬러 쉐도우 : {level}</span>\n          <Slider\n            defaultValue={level}\n            min={100}\n            max={900}\n            step={100}\n            onChange={(value) => onChangeLevel(value)}\n            trackStyle={{\n              backgroundColor: \"#90CAF9\",\n              height: 8,\n            }}\n            railStyle={{\n              height: 8,\n            }}\n            handleStyle={{\n              backgroundColor: \"#90CAF9\",\n              marginTop: -4,\n            }}\n          />\n        </div>\n        <Box sx={{ minWidth: 150, margin: \"1rem\" }}>\n          <FormControl fullWidth size=\"small\">\n            <InputLabel id=\"demo-simple-select-label\">색상 포맷</InputLabel>\n            <Select\n              value={colorFormat}\n              label=\"Color Format\"\n              onChange={selectChangeHandler}\n            >\n              <MenuItem value=\"hex\">HEX</MenuItem>\n              {/* <MenuItem value=\"#HEX\">#HEX</MenuItem> */}\n              <MenuItem value=\"rgb\">RGB</MenuItem>\n              <MenuItem value=\"rgba\">RGBA</MenuItem>\n            </Select>\n          </FormControl>\n        </Box>\n      </div>\n    </div>\n  );\n};\n\nexport default PaletteControl;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n\nconst CustomSnackbar = (props) => {\n  const { open, setOpen, message } = props;\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const action = (\n    <React.Fragment>\n      <IconButton\n        size=\"small\"\n        aria-label=\"close\"\n        color=\"inherit\"\n        onClick={handleClose}\n      >\n        <CloseIcon fontSize=\"small\" />\n      </IconButton>\n    </React.Fragment>\n  );\n  return (\n    <div>\n      <Snackbar\n        open={open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        message=\"색상 포맷 변경됨\"\n        action={action}\n      />\n    </div>\n  );\n};\n\nexport default CustomSnackbar;\n","import React, { useState } from \"react\";\nimport ColorContainer from \"../ColorContainer\";\nimport styles from \"./Palette.module.css\";\nimport PaletteControl from \"./PaletteControl\";\nimport CustomSnackbar from \"../UI/CustomSnackbar\";\n\nconst Palette = (props) => {\n  const [level, setLevel] = useState(500);\n  const [colorFormat, setColorFormat] = useState(\"hex\");\n  const [isSanckbarOpen, setIsSanckbarOpen] = useState(false);\n\n  const { colors, emoji, id, paletteName } = props.palette;\n\n  const levelChangeHandler = (sliderLevel) => {\n    setLevel(sliderLevel);\n  };\n\n  const formatChangeHandler = (formatValue) => {\n    setColorFormat(formatValue);\n    setIsSanckbarOpen(true);\n  };\n\n  return (\n    <div className={styles.palette}>\n      <CustomSnackbar open={isSanckbarOpen} setOpen={setIsSanckbarOpen} />\n      <PaletteControl\n        level={level}\n        colorFormat={colorFormat}\n        onChangeLevel={levelChangeHandler}\n        onChangeFormat={formatChangeHandler}\n        paletteName={paletteName}\n        emoji={emoji}\n      />\n      <div className={styles[\"palette-colors\"]}>\n        {colors[level].map((color, index) => (\n          <ColorContainer\n            key={index}\n            colorName={color.name}\n            colorCode={color[colorFormat]}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Palette;\n","import chroma, { hex } from \"chroma-js\";\n\nconst levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\n\nfunction generatePalette(initialPalette) {\n  let newPalette = {\n    paletteName: initialPalette.paletteName,\n    id: initialPalette.id,\n    emoji: initialPalette.emoji,\n    colors: {},\n  };\n\n  for (let level of levels) {\n    newPalette.colors[level] = [];\n  }\n\n  for (let color of initialPalette.colors) {\n    let scale = getScale(color.color, 10).reverse();\n    for (let i in scale) {\n      newPalette.colors[levels[i]].push({\n        name: `${color.name} ${levels[i]}`,\n        id: color.name.toLowerCase().replace(/ /g, \"-\"),\n        hex: scale[i],\n        rgb: chroma(scale[i]).css(),\n        rgba: chroma(scale[i])\n          .css()\n          .replace(\"rgb\", \"rgba\")\n          .replace(\")\", \",1.0)\"),\n      });\n    }\n  }\n\n  return newPalette;\n}\n\nfunction getRange(hexColor) {\n  const end = \"#fff\";\n  return [chroma(hexColor).darken(1.4).hex(), hexColor, end];\n}\n\nfunction getScale(hexColor, numberOfColors) {\n  return chroma.scale(getRange(hexColor)).mode(\"lab\").colors(numberOfColors);\n}\n\nexport { generatePalette };\n","import React, { useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Header from \"../components/Layout/Header\";\nimport Palette from \"../components/Palette/Palette\";\nimport dummyData from \"../dummy-data\";\nimport ColorsContext from \"../store/colors-context\";\nimport { generatePalette } from \"../util/colorHelper\";\n\nconst PalettePage = () => {\n  const params = useParams();\n  const paletteId = params.paletteId;\n\n  const ColorsCtx = useContext(ColorsContext);\n\n  const selectedPalette = ColorsCtx.colors.find(\n    (element) => element.id === paletteId\n  );\n\n  return (\n    <div>\n      <Header />\n      <Palette palette={generatePalette(selectedPalette)} />\n    </div>\n  );\n};\n\nexport default PalettePage;\n"],"names":["props","colorName","colorCode","useState","isPicked","setIsPicked","pickedColorInput","useRef","isDark","chroma","luminance","isLight","CopyToClipboard","text","onCopy","current","checked","style","background","className","styles","type","id","value","name","ref","onBlur","htmlFor","level","colorFormat","onChangeLevel","onChangeFormat","paletteName","emoji","defaultValue","min","max","step","onChange","trackStyle","backgroundColor","height","railStyle","handleStyle","marginTop","Box","sx","minWidth","margin","FormControl","fullWidth","size","InputLabel","Select","label","event","target","MenuItem","open","setOpen","handleClose","message","reason","action","IconButton","color","onClick","Close","fontSize","Snackbar","autoHideDuration","onClose","setLevel","setColorFormat","isSanckbarOpen","setIsSanckbarOpen","palette","colors","sliderLevel","formatValue","map","index","levels","generatePalette","initialPalette","newPalette","hexColor","numberOfColors","scale","end","darken","hex","getRange","mode","reverse","i","push","toLowerCase","replace","rgb","css","rgba","paletteId","useParams","selectedPalette","useContext","ColorsContext","find","element","Header"],"sourceRoot":""}